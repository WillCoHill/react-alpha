{"version":3,"sources":["components/page.js","App.js","reportWebVitals.js","index.js"],"names":["Page","props","state","text","count","colour","handleClick","bind","colourChange","this","setState","Math","floor","random","toString","Button","style","background","color","onClick","React","Component","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qPAIqBA,E,kDACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,KAAM,sBACNC,MAAO,EACPC,OAAQ,IAEZ,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBARL,E,+CAWnB,WACIE,KAAKC,SAAS,CACVN,MAAOK,KAAKP,MAAME,MAAQ,M,0BAIlC,WACIK,KAAKC,SAAS,CACVL,OAAQM,KAAKC,MAAsB,MAAhBD,KAAKE,UAAkBC,SAAS,Q,oBAK3D,WACI,OACI,gCACI,6BAAKL,KAAKP,MAAMC,OAChB,uBACA,yDACA,eAACY,EAAA,EAAD,CAAQC,MAAO,CAACC,WAAY,IAAIR,KAAKP,MAAMG,QAA3C,oBAA4DI,KAAKP,MAAME,SACvE,uBACA,cAACW,EAAA,EAAD,CAAQG,MAAM,UAAUC,QAASV,KAAKH,YAAtC,gCACA,uBACA,0DAA6BG,KAAKP,MAAMG,UACxC,cAACU,EAAA,EAAD,CAAQG,MAAM,UAAUC,QAASV,KAAKD,aAAtC,kC,GApCkBY,IAAMC,WCWzBC,MAXf,WACE,OACE,sBAAKC,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,yBAGA,cAAC,EAAD,QCESC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.568f7646.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Button } from 'reactstrap';\r\nimport { render } from 'react-dom';\r\n\r\nexport default class Page extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            text: \"Welcome to my Page!\",\r\n            count: 0,\r\n            colour: \"\"\r\n            }\r\n        this.handleClick = this.handleClick.bind(this);\r\n        this.colourChange = this.colourChange.bind(this);\r\n        }\r\n\r\n    handleClick() {\r\n        this.setState({\r\n            count: this.state.count + 1,\r\n        })\r\n    }\r\n\r\n    colourChange() {\r\n        this.setState({\r\n            colour: Math.floor(Math.random() * 65535).toString(16)\r\n        })\r\n    }\r\n    \r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <h1>{this.state.text}</h1>\r\n                <br />\r\n                <p>This is a test component</p>\r\n                <Button style={{background: \"#\"+this.state.colour}}>Count: {this.state.count}</Button>\r\n                <br />\r\n                <Button color=\"primary\" onClick={this.handleClick}>++ Increment Count</Button>\r\n                <br />\r\n                <p>Testing color generator: {this.state.colour}</p>\r\n                <Button color=\"primary\" onClick={this.colourChange}>Change Colour</Button>\r\n            </div>\r\n        );\r\n    }\r\n}","import './App.css';\nimport { Button } from 'reactstrap';\nimport Page from './components/page';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n          Learn React\n      </header>\n      <Page />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}